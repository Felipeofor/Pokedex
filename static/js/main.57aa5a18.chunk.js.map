{"version":3,"sources":["components/contexts/FavoriteContext.js","components/Navbar/Navbar.js","components/Searchbar/Searchbar.js","components/Modal/Modal.js","api.js","components/Pokemon/Pokemon.js","components/ArrowsSvg/ArrowsSvg.js","components/Pagination/Pagination.js","components/Pokedex/Pokedex.js","App.js","index.js"],"names":["FavoriteContext","React","createContext","favoritePokemons","updateFavoritePokemons","id","FavoriteProvider","Provider","useContext","Navbar","src","alt","className","lenght","useState","Searchbar","props","onSearch","search","setSearch","onClick","e","a","placeholder","onChange","target","value","Modal","setShowModal","elements","console","log","modalRef","useRef","ReactDom","createPortal","ref","current","pokemon","sprites","front_default","name","weight","height","base_experience","types","map","type","document","getElementById","searchPokemon","url","fetch","response","json","data","getPokemons","limit","offset","getPokemonData","Pokemon","showModal","heart","includes","to","idx","preventDefault","LeftArrow","xmlns","viewBox","width","d","fill","stroke","RightArrow","Pagination","onLeftClick","onRightClick","page","totalPages","Pokedex","pokemons","setPage","total","loading","nextPage","Math","max","min","useEffect","localStorageKey","App","setPokemons","setTotal","setLoading","favorites","setFavorites","notFound","setNotFound","setSerching","fetchPokemons","promises","results","Promise","all","ceil","count","JSON","parse","window","localStorage","getItem","loadFavoritePokemons","result","updated","isFavorite","indexOf","splice","push","setItem","stringify","exact","path","component","rootElement","ReactDOM","render","StrictMode"],"mappings":"6NAGMA,EAAkBC,IAAMC,cAAc,CACxCC,iBAAkB,GAClBC,uBAAwB,SAACC,GAAD,OAAQ,QAGvBC,EAAmBN,EAAgBO,SAEjCP,I,OCJPQ,EAAeP,IAAfO,WAuBOC,EArBA,WAEX,IAAON,EAAoBK,EAAWR,GAA/BG,iBAKP,OACI,gCACI,wBACA,8BACA,qBAAKO,IANA,8EAOLC,IAAK,eACLC,UAAU,mBAEV,oCAAOT,EAAiBU,UACxB,4BCrBLC,EAAYb,IAAZa,SAyCQC,EAnCG,SAACC,GAGf,IAAOC,EAAYD,EAAZC,SACP,EAA2BH,EAAS,IAApC,mBAAOI,EAAP,KAAcC,EAAd,KAUMC,EAAO,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACZL,EAASC,GADG,2CAAH,sDAMb,OAEI,sBAAKN,UAAU,sBAAf,UACA,qBAAKA,UAAU,YAAf,SACE,uBACAW,YAAc,oBACdC,SApBW,SAACH,GAEdF,EAAUE,EAAEI,OAAOC,OACW,IAA1BL,EAAEI,OAAOC,MAAMb,QAChBI,EAAS,WAkBZ,qBAAKL,UAAU,gBAAf,SACI,wBAAQQ,QAASA,EAAjB,0BCjCCO,EAAQ,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,SACpCC,QAAQC,IAAIF,GAEZ,IAAMG,EAAWC,mBAOjB,OAAOC,IAASC,aACd,qBAAKvB,UAAU,YAAYwB,IAAKJ,EAAUZ,QAPzB,SAACC,GACdA,EAAEI,SAAWO,EAASK,SACxBT,GAAa,IAKf,SACE,qBAAKhB,UAAU,QAAf,SACE,sBAAKA,UAAU,cAAf,UACE,8BAAK,qBAAKF,IAAKmB,EAASS,QAAQC,QAAQC,cAAe7B,IAAKkB,EAASS,QAAQG,SAC9E,2CAAcZ,EAASS,QAAQG,QAC/B,yCAAYZ,EAASS,QAAQI,UAC7B,2CAAcb,EAASS,QAAQK,UAC/B,gDAAmBd,EAASS,QAAQM,mBAClCf,EAASS,QAAQO,MAAMC,KAAI,YAAa,IAAXC,EAAU,EAAVA,KAC7B,OAAO,yCAAYA,EAAKN,kBAM9BO,SAASC,eAAe,YAG7BnB,QAAQC,MACOJ,QChCFuB,EAAa,uCAAG,WAAOZ,GAAP,mBAAAhB,EAAA,sEAIjB6B,EAJiB,4CAI0Bb,GAJ1B,SAKEc,MAAMD,GALR,cAKfE,EALe,gBAMFA,EAASC,OANP,cAMfC,EANe,yBAOdA,GAPc,4FAAH,sDAgBbC,EAAW,uCAAG,gDAAAlC,EAAA,6DAAOmC,EAAP,+BAAa,GAAIC,EAAjB,+BAAwB,EAAxB,SAGfP,EAHe,kDAGkCM,EAHlC,mBAGkDC,GAHlD,SAIIN,MAAMD,GAJV,cAIbE,EAJa,gBAKAA,EAASC,OALT,cAKbC,EALa,yBAMZA,GANY,4FAAH,qDAeXI,EAAc,uCAAG,WAAOR,GAAP,iBAAA7B,EAAA,+EAEC8B,MAAMD,GAFP,cAEhBE,EAFgB,gBAGHA,EAASC,OAHN,cAGhBC,EAHgB,yBAIfA,GAJe,4FAAH,sDCwCZK,EA/DE,SAAC5C,GAId,MAAkCF,oBAAS,GAA3C,mBAAO+C,EAAP,KAAkBjC,EAAlB,KAQOU,EAAWtB,EAAXsB,QACP,EAAmD9B,qBAAWR,GAAvDG,EAAP,EAAOA,iBAAkBC,EAAzB,EAAyBA,uBAInB0D,EAAQ3D,EAAiB4D,SAASzB,EAAQG,MAF/B,eACE,eAYnB,OAEI,qBAAK7B,UAAW,eAAhB,SAA+B,eAAC,OAAD,CAAMoD,GAAG,SAAT,UAC3B,qBAAKpD,UAAU,wBAAf,SACI,qBAAKF,IAAK4B,EAAQC,QAAQC,cAAe7B,IAAK2B,EAAQG,SAE1D,sBAAK7B,UAAU,YAAf,UACI,sBAAKA,UAAU,WAAf,UACI,6BAAK0B,EAAQG,OACb,oCAAOH,EAAQjC,SAEnB,sBAAKO,UAAU,cAAf,UACI,qBAAKA,UAAU,eAAf,SAA+B0B,EAAQO,MAAMC,KAAI,SAACC,EAAKkB,GACtD,OACI,qBAAerD,UAAU,oBAAzB,SAA+CmC,EAAKA,KAAKN,MAA/CwB,QAIf,wBAAQ7C,QA3BL,SAACC,GAChBA,EAAE6C,iBACF9D,EAAuBkC,EAAQG,MAC/B,IAAMc,EAAQL,EAAcZ,EAAQG,MACpCX,QAAQC,IAAIwB,IAuB8B3C,UAAU,oBAAxC,SACA,qBAAKA,UAAU,mBAAf,SAAmCkD,SAGvC,gCACJ,wBAAQlD,UAAU,sBAAsBQ,QA9C9B,SAACJ,GACjBY,GAAa,EAAMZ,IA8CbU,MAAOY,EAAQG,KADf,iCAECoB,EAAY,cAAC,EAAD,CAAOjC,aAAcA,EACTC,SAAYb,IAChC,iBC/DJmD,EAAY,WACrB,OACI,qBACFC,MAAM,6BACNC,QAAQ,YACRC,MAAM,KACN3B,OAAO,KAJL,SAMF,sBACE4B,EAAE,sBACFC,KAAK,OACLC,OAAO,OACP,iBAAe,QACf,kBAAgB,aAMXC,EAAa,WACtB,OACI,qBACFN,MAAM,6BACNC,QAAQ,YACRC,MAAM,KACN3B,OAAO,KAJL,SAMF,sBACE4B,EAAE,oBACFC,KAAK,OACLC,OAAO,OACP,iBAAe,QACf,kBAAgB,aClBTE,EAbI,SAAC3D,GAEhB,IAAO4D,EAA+C5D,EAA/C4D,YAAaC,EAAkC7D,EAAlC6D,aAAcC,EAAoB9D,EAApB8D,KAAMC,EAAc/D,EAAd+D,WAExC,OACI,sBAAKnE,UAAU,aAAf,UACI,wBAAQA,UAAU,iBAAiBQ,QAAWwD,EAA9C,SAA2D,qBAAKhE,UAAU,OAAf,SAAsB,cAAC,EAAD,QACjF,gCAAMkE,EAAN,OAAgBC,KAChB,wBAAQnE,UAAU,iBAAiBQ,QAAWyD,EAA9C,SAA4D,qBAAKjE,UAAU,OAAf,SAAsB,cAAC,EAAD,YCqC/EoE,EA3CC,SAAChE,GAGb,IAAOiE,EAA2CjE,EAA3CiE,SAAUH,EAAiC9D,EAAjC8D,KAAMI,EAA2BlE,EAA3BkE,QAASC,EAAkBnE,EAAlBmE,MAAOC,EAAWpE,EAAXoE,QAgBvC,OACI,gCACI,sBAAKxE,UAAU,SAAf,UACI,yCACA,cAAC,EAAD,CACAkE,KAAQA,EAAO,EACfC,WAAcI,EACdP,YArBK,WACb,IAAMS,EAAWC,KAAKC,IAAIT,EAAO,EAAG,GACpCI,EAAQG,IAoBAR,aAjBK,WACb,IAAMQ,EAAWC,KAAKE,IAAIV,EAAO,EAAGK,EAAO,GAC3CD,EAAQG,SAkBHD,EACD,wDACI,qBAAKxE,UAAU,eAAf,SACKqE,EAASnC,KAAI,SAACR,GACX,OAAO,cAAC,EAAD,CAASA,QAAWA,GACrBA,EAAQG,eC5B/B3B,EAAuBb,IAAvBa,SAAU2E,EAAaxF,IAAbwF,UAEXC,EAAkB,mBAGT,SAASC,IAEtB,MAAgC7E,EAAS,IAAzC,mBAAOmE,EAAP,KAAiBW,EAAjB,KAEA,EAAwB9E,EAAS,GAAjC,mBAAOgE,EAAP,KAAaI,EAAb,KACA,EAAyBpE,EAAS,GAAlC,mBAAOqE,EAAP,KAAaU,EAAb,KAEA,EAA8B/E,GAAS,GAAvC,mBAAOsE,EAAP,KAAgBU,EAAhB,KACA,EAAkChF,EAAS,IAA3C,mBAAOiF,EAAP,KAAkBC,EAAlB,KACA,EAAgClF,GAAS,GAAzC,mBAAOmF,EAAP,KAAiBC,EAAjB,KACA,EAAgCpF,GAAS,GAAzC,mBAAiBqF,GAAjB,WAGMC,EAAa,uCAAG,gCAAA9E,EAAA,sEAGlBwE,GAAW,GAHO,SAICtC,EAAY,GAAI,GAAKsB,GAJtB,cAIZvB,EAJY,OAKZ8C,EAAW9C,EAAK+C,QAAQxD,IAAb,uCAAiB,WAAOR,GAAP,SAAAhB,EAAA,sEACnBqC,EAAerB,EAAQa,KADJ,mFAAjB,uDALC,SAQIoD,QAAQC,IAAIH,GARhB,OAQZC,EARY,OASlBV,EAAYU,GAEZR,GAAW,GACXD,EAASP,KAAKmB,KAAKlD,EAAKmD,MAAQ,KAZd,4GAAH,qDAwBjBjB,GAAU,YANmB,WAC3B,IAAMR,EACN0B,KAAKC,MAAMC,OAAOC,aAAaC,QAAQrB,KAAqB,GAC5DM,EAAaf,GAIb+B,KACC,IAKLvB,GAAU,WACRW,MACC,CAACtB,IAIJ,IAaM7D,EAAQ,uCAAG,WAAOqB,GAAP,eAAAhB,EAAA,yDACVgB,EADU,yCAEN8D,GAFM,cAIfN,GAAW,GACXI,GAAa,GACbC,GAAa,GANE,SAOMjD,EAAeZ,GAPrB,UAOT2E,EAPS,+BASbf,GAAY,GACZJ,GAAW,GAVE,2BAcbF,EAAa,CAACqB,IACd/B,EAAQ,GACRW,EAAS,GAhBI,QAkBfC,GAAW,GACXK,GAAa,GAnBE,4CAAH,sDAuBd,OACE,cAAC7F,EAAD,CAAkBoB,MAAO,CACvBvB,iBAAkB4F,EACpB3F,uBAvC6B,SAACqC,GAC9B,IAAMyE,EAAO,YAAOnB,GACdoB,EAAapB,EAAUqB,QAAQ3E,GAClC0E,GAAc,EACfD,EAAQG,OAAOF,EAAY,GAG3BD,EAAQI,KAAK7E,GAEfuD,EAAakB,GACbL,OAAOC,aAAaS,QAAQ7B,EAAiBiB,KAAKa,UAAUN,MA2B5D,SAIA,8BACE,eAAC,IAAD,WACA,cAAC,EAAD,IACA,eAAC,IAAD,WACE,sBAAKtG,UAAU,MAAf,UACE,cAAC,EAAD,CAAWK,SAAUA,IACpBgF,EAAa,qBAAKrF,UAAU,iBAAf,iEACd,cAAC,EAAD,CACEwE,QAAWA,EACXH,SAAYA,EACZH,KAAQA,EACRI,QAAWA,EACXC,MAASA,OAIb,cAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,SAASC,UAAahG,cCxHhD,IAAMiG,EAAc5E,SAASC,eAAe,QAC5C4E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACpC,EAAD,MAEFiC,K","file":"static/js/main.57aa5a18.chunk.js","sourcesContent":["//Importamos los componentes\r\nimport React from 'react';\r\n\r\nconst FavoriteContext = React.createContext({\r\n    favoritePokemons: [],\r\n    updateFavoritePokemons: (id) => null\r\n});\r\n\r\nexport const FavoriteProvider = FavoriteContext.Provider;\r\n\r\nexport default FavoriteContext;","//Importamos los componentes\r\nimport React from 'react';\r\nimport FavoriteContext from '../contexts/FavoriteContext';\r\n\r\n/*BARRA DE NAVEGACION */\r\n\r\nconst { useContext } = React;\r\n\r\nconst Navbar = () => {\r\n\r\n    const {favoritePokemons} = useContext(FavoriteContext);\r\n\r\n    /*Creamos la variable con la imagen importada de pokeapi 'logo' */\r\n    let imgUrl = \"https://raw.githubusercontent.com/PokeAPI/media/master/logo/pokeapi_256.png\";\r\n\r\n    return (\r\n        <nav>\r\n            <div/>\r\n            <div>\r\n            <img src={imgUrl} \r\n            alt ='pokeapi-logo'\r\n            className='navbar-image'/>\r\n            </div> \r\n            <div> {favoritePokemons.lenght}</div>\r\n            <div />\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","//Importamos los componentes\r\nimport React from 'react';\r\n/*Le avisamos a React que renderice con cada cambio de estado*/\r\nconst {useState} = React; \r\n\r\n\r\n/*BUSCADOR DE POKEMON*/\r\n\r\n\r\nconst Searchbar = (props) => {\r\n\r\n    /*Ingreso el valor inicial del search*/\r\n    const {onSearch} = props;\r\n    const [search,setSearch] = useState(\"\");\r\n\r\n    const onChange = (e) => {\r\n        /*Actualizamos el DOM con cada cambio que ingrese el usuario*/\r\n        setSearch(e.target.value);\r\n        if (e.target.value.lenght === 0) {\r\n           onSearch(null);\r\n       }\r\n    };\r\n    /*Cuando presionemos el boton llamaremos a la funcion searchPokemon del archivo api.js para que busque el pokemon deseado*/\r\n    const onClick = async (e) => {\r\n        onSearch(search);\r\n    };\r\n\r\n\r\n \r\n    return (\r\n\r\n        <div className=\"searchbar-container\">\r\n        <div className=\"searchbar\">\r\n          <input \r\n          placeholder = 'Buscar pokemon...'\r\n          onChange={onChange}/>  \r\n        </div>\r\n        <div className=\"searchbar-btn\"> \r\n            <button onClick={onClick}>Buscar</button>\r\n        </div>     \r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Searchbar;","//Importamos los componentes\r\nimport React, { useRef } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\n\r\n\r\nexport const Modal = ({ setShowModal, elements}) => {\r\n  console.log(elements)\r\n  // Cerrramos el modal cuando hacemos click fuera de el\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n  /*Imagen y caracteristicas del pokemon dentro del modal */\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal\">\r\n        <div className=\"description\">\r\n          <div><img src={elements.pokemon.sprites.front_default} alt={elements.pokemon.name} /></div>\r\n         <div>Nombre: {elements.pokemon.name}</div> \r\n         <div>Peso: {elements.pokemon.weight}</div>\r\n         <div>Altura: {elements.pokemon.height}</div>\r\n         <div>Experiencia: {elements.pokemon.base_experience}</div> \r\n          {elements.pokemon.types.map(({type}) => {\r\n           return <div>Tipo: {type.name}</div>\r\n           })\r\n         }\r\n         </div> \r\n      </div>\r\n      </div>\r\n    ,document.getElementById(\"portal\")\r\n  );\r\n};\r\nconsole.log();\r\nexport default Modal;","/*Aqui estan las constantes que consumen de la api */\r\n/*Buscamos el pokemon que el usuario ingreso */\r\n\r\nexport const searchPokemon = async (pokemon) => {\r\n    /*Protegemos la aplicacion ante cualquier error que pueda traer la api con try catch */\r\n    try {\r\n        /*Creamos una variable que consume de la api el pokemon que el usuario este buscando */\r\n        let url = `https://pokeapi.co/api/v2/pokemon/${pokemon}`/*Buscamos el pokemon que el usuario ingreso */\r\n        const response = await fetch(url);/*Fetch nos permite obtener la informacion de esa url*/\r\n        const data = await response.json();/*Pasamos la informacion recibida a Json*/\r\n        return data;/*Retornamos esa infomarcion a nuestro componente de React */\r\n    }\r\n    catch (err) {\r\n\r\n    }\r\n};\r\n\r\n/*Cargamos una x cantidad de pokemon en la pantalla principal */\r\n\r\nexport const getPokemons = async (limit=25, offset=0) => {\r\n    try {\r\n        /*Creamos una variable que consume de la api el pokemon que el usuario este buscando */\r\n        let url = `https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}`/*Cargamos una x cantidad de pokemon en la pantalla principal */\r\n        const response = await fetch(url);/*Fetch nos permite obtener la informacion de esa url*/\r\n        const data = await response.json();/*Pasamos la informacion recibida a Json*/\r\n        return data;/*Retornamos esa infomarcion a nuestro componente de React */\r\n    }\r\n    catch (err) {\r\n\r\n    }\r\n}\r\n\r\n/*Obtenemos mas informacion de cada pokemon para renderizar las tarjetas */\r\n\r\nexport const getPokemonData = async (url) => {\r\n    try {\r\n        const response = await fetch(url);/*Fetch nos permite obtener la informacion de la url*/\r\n        const data = await response.json();/*Pasamos la informacion recibida a Json*/\r\n        return data;/*Retornamos esa infomarcion a nuestro componente de React */\r\n        \r\n    } catch (err) {\r\n        \r\n    }\r\n}","//Importamos los componentes\r\nimport React, {useContext, Link} from 'react';\r\nimport FavoriteContext from '../contexts/FavoriteContext'\r\nimport {Modal} from '../Modal/Modal';\r\nimport { useState } from \"react\";\r\nimport { searchPokemon } from '../../api';\r\n\r\n/*Creamos un componente que solo muestra informacion basado en informacion que le pasamos de los props */\r\n\r\n\r\n\r\nconst Pokemon =  (props) => {\r\n\r\n      /*Modal */\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const openModal = (props) => {\r\n      setShowModal(true, props);\r\n    };\r\n\r\n\r\n\r\n    /*Selecciono mi pokemons favoritos*/\r\n    const {pokemon} = props;\r\n    const {favoritePokemons, updateFavoritePokemons} = useContext(FavoriteContext);\r\n\r\n    const redHeart = \"❤️\";\r\n    const blackHeart = \"🖤\";\r\n    const heart = favoritePokemons.includes(pokemon.name) ? redHeart :blackHeart;\r\n\r\n    const clickHeart = (e) => {\r\n        e.preventDefault();\r\n        updateFavoritePokemons(pokemon.name);\r\n        const data =  searchPokemon(pokemon.name);\r\n        console.log(data); \r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        \r\n        <div className= \"pokemon-card\"><Link to=\"/Modal\">\r\n            <div className=\"pokemon-img-container\">\r\n                <img src={pokemon.sprites.front_default} alt={pokemon.name} />\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"card-top\">\r\n                    <h3>{pokemon.name}</h3>\r\n                    <div>#{pokemon.id}</div> \r\n                </div>\r\n                <div className=\"card-botton\">\r\n                    <div className=\"pokemon-type\">{pokemon.types.map((type,idx) => {\r\n                     return (\r\n                         <div key={idx} className=\"pokemon-type-text\" >{type.type.name}</div>\r\n                     );\r\n                    })}\r\n                    </div>\r\n                    <button onClick={clickHeart}  className=\"pokemon-heart-btn\">\r\n                    <div className=\"pokemon-favorite\">{heart}</div>\r\n                    </button>\r\n                </div>\r\n                <div>\r\n            <button className=\"caracteristicas-btn\" onClick={openModal} \r\n            value={pokemon.name}>Ver caracteristicas</button>\r\n            {showModal ? <Modal setShowModal={setShowModal}\r\n                                     elements = {props} \r\n            /> : null}\r\n            </div>\r\n            </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pokemon;","//Importamos los componentes\r\nimport React from 'react';\r\n\r\nexport const LeftArrow = () => {\r\n    return (\r\n        <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 21 21\"\r\n      width=\"28\"\r\n      height=\"28\"\r\n    >\r\n      <path\r\n        d=\"M11.5 14.5l-4-4 4-4\"\r\n        fill=\"none\"\r\n        stroke=\"#FFF\"\r\n        stroke-linecap=\"round\"\r\n        stroke-linejoin=\"round\"\r\n      />\r\n    </svg>\r\n    );\r\n};\r\n\r\nexport const RightArrow = () => {\r\n    return (\r\n        <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 21 21\"\r\n      width=\"28\"\r\n      height=\"28\"\r\n    >\r\n      <path\r\n        d=\"M9.5 14.5l4-4-4-4\"\r\n        fill=\"none\"\r\n        stroke=\"#FFF\"\r\n        stroke-linecap=\"round\"\r\n        stroke-linejoin=\"round\"\r\n      />\r\n    </svg>\r\n    );\r\n};","//Importamos los componentes\r\nimport React from 'react';\r\nimport { LeftArrow, RightArrow } from '../ArrowsSvg/ArrowsSvg';\r\n\r\nconst Pagination = (props) => {\r\n\r\n    const {onLeftClick, onRightClick, page, totalPages} = props;\r\n    //Botones para cambiar la pagina\r\n    return (\r\n        <div className=\"pagination\">\r\n            <button className=\"pagination-btn\" onClick = {onLeftClick}><div className=\"icon\"><LeftArrow/></div></button>\r\n            <div>{page} de {totalPages}</div>\r\n            <button className=\"pagination-btn\" onClick = {onRightClick}><div className=\"icon\"><RightArrow/></div></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;","//Importamos los componentes\r\nimport React from 'react';\r\nimport Pokemon from '../Pokemon';\r\nimport Pagination from '../Pagination';\r\n\r\n\r\nconst Pokedex = (props) => {\r\n\r\n    /*Obtengo la informacion del props*/\r\n    const {pokemons, page, setPage, total, loading} = props;\r\n\r\n    const lastPage = () => {\r\n        const nextPage = Math.max(page - 1, 0);\r\n        setPage(nextPage);\r\n    };\r\n\r\n    const nextPage = () => {\r\n        const nextPage = Math.min(page + 1, total -1);\r\n        setPage(nextPage);\r\n    };\r\n\r\n\r\n    /*Recorremos la const pokemons con map */\r\n    /*Aplicamos una key para los nombres de los pokemons */\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <h1>Pokedex</h1>\r\n                <Pagination\r\n                page = {page + 1}\r\n                totalPages = {total}\r\n                onLeftClick = {lastPage}\r\n                onRightClick = {nextPage}\r\n                />\r\n            </div>\r\n            {loading ?\r\n            <div>Cargando pokemones...</div> : (\r\n                <div className=\"pokedex-grid\">\r\n                    {pokemons.map((pokemon) => {\r\n                        return <Pokemon pokemon = {pokemon}\r\n                         key={pokemon.name}/>\r\n                })}\r\n            </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pokedex;","//Importamos la hoja de estilo\nimport './app.scss';\n//Importamos los componentes\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Searchbar from './components/Searchbar';\nimport Pokedex from './components/Pokedex';\nimport Modal from './components/Modal';\nimport {getPokemonData, getPokemons, searchPokemon} from  './api';\nimport {FavoriteProvider} from './components/contexts/FavoriteContext';\n\n/*Aplicamos un hook */\nconst {useState, useEffect} = React;\n\nconst localStorageKey = 'favorite_pokemon';\n\n\nexport default function App() {\n\n  const [pokemons, setPokemons] = useState([]);\n  /*Creamos las paginas donde se va a mostrar los pokemons */\n  const [page, setPage] = useState(0);\n  const [total,setTotal] = useState(0);\n  /*Creamos una cost que nos muestre un mensaje que los pokemoms se estan cargando y cuando termine de cargar cambia su estado a false*/\n  const [loading, setLoading] = useState(true);\n  const [favorites, setFavorites] = useState([]);\n  const [notFound, setNotFound] = useState(false);\n  const [serching, setSerching] = useState(false);\n\n\n  const fetchPokemons = async () => {\n    /*Protegemos la aplicacion ante cualquier error que pueda traer la api con try catch */\n    try {\n      setLoading(true);\n      const data = await getPokemons(25, 25 * page);/*Llamamos a la api con la cantidad de pokemons que queremos y lo multiplicamos por la pagina en la que estemos*/\n      const promises = data.results.map(async (pokemon) => {\n        return await getPokemonData(pokemon.url)\n      })\n      const results = await Promise.all(promises);\n      setPokemons(results);\n      /*Cambio de estado de setLoading cuando se termina la carga */\n      setLoading(false);\n      setTotal(Math.ceil(data.count / 25));\n    } catch (err) {\n      \n    }\n  }\n\n    const loadFavoritePokemons = () => {\n      const pokemons =\n      JSON.parse(window.localStorage.getItem(localStorageKey)) || [];\n      setFavorites(pokemons);\n    }\n\n    useEffect(() => {\n      loadFavoritePokemons();\n    }, []);\n\n\n/*Le pasamos una funcion, pero hacemos que ejecute este codigo solo una vez cuando termine de renderizar. Lo hacemos con un array vacio*/\n/*Para que refleje una lista de pokemons cuando ingresamos a la app */\n  useEffect(() => {\n    fetchPokemons();\n  }, [page]);\n\n  /*Creamos la constante donde vamos a poder agregar o quitar los pokemons favoritos */\n\n  const updateFavoritePokemons = (name) => {\n    const updated = [...favorites];\n    const isFavorite = favorites.indexOf(name);\n    if(isFavorite >= 0) {\n      updated.splice(isFavorite, 1);\n    }\n    else {\n      updated.push(name);\n    }\n    setFavorites(updated);\n    window.localStorage.setItem(localStorageKey, JSON.stringify(updated));\n  }\n\n  const onSearch = async (pokemon) => {\n    if (!pokemon) {\n      return fetchPokemons;\n    }\n    setLoading(true);\n    setNotFound (false);\n    setSerching (true);\n    const result = await searchPokemon (pokemon);\n    if (!result) {\n      setNotFound(true);\n      setLoading(false);\n      return;\n    }\n    else {\n      setPokemons ([result]);\n      setPage(0);\n      setTotal(1);\n    }\n    setLoading(false);\n    setSerching (false);\n  }\n  \n\n  return (\n    <FavoriteProvider value={{\n      favoritePokemons: favorites, \n    updateFavoritePokemons: updateFavoritePokemons\n    }}>\n    <div>\n      <BrowserRouter>\n      <Navbar />\n      <Switch>\n        <div className=\"App\">\n          <Searchbar onSearch={onSearch} />\n          {notFound ? ( <div className=\"not-found-text\">No se encontro el Pokemon que buscabas 😥</div>) : (\n          <Pokedex \n            loading = {loading}\n            pokemons = {pokemons}\n            page = {page}\n            setPage = {setPage}\n            total = {total}\n          />\n          )}\n        </div>\n        <Route exact path='/Modal' component = {Modal}/>\n        </Switch>\n        </BrowserRouter>\n      </div>\n    </FavoriteProvider>\n    \n  );\n    \n  \n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}